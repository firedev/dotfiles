" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:

" }

" PLUGINS {

" Vundle.vim {
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/vundle
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/vundle'
" }

" Snippets and completion {

Plugin 'Shougo/neocomplete' "{
" Neocomplete
let g:neocomplete#enable_at_startup = 1
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
"}

Plugin 'Shougo/neosnippet.vim' "{
" Neosnippet
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif
"}

Plugin 'Shougo/neosnippet-snippets'
Plugin 'honza/vim-snippets'
" }

" Colors, indents, airline, tmuxline {

Plugin 'bling/vim-airline' "{
" bling/vim-airline
" remove separators
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_left_alt_sep=''
let g:airline_right_alt_sep=''
let g:airline_section_y='' " Remove encoding and newline
" enable/disable showing only non-zero hunks.
let g:airline#extensions#hunks#non_zero_only=1
" because of TmuxlineSnapshot
let g:airline#extensions#tmuxline#enabled=0
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#tab_min_count = 2
"}

" Plugin 'bling/vim-bufferline' " {
" "}

Plugin 'flazz/vim-colorschemes'
Plugin 'edkolev/tmuxline.vim'

Plugin 'Yggdroot/indentLine' "{
" Indentline
let g:indentLine_char="┆"
"}

Plugin 'airblade/vim-gitgutter' "{
" GitGutter
" highlight clear SignColumn
highlight GitGutterAdd ctermfg=green guibg=bg
highlight GitGutterDelete ctermfg=red guibg=bg
highlight GitGutterChange ctermfg=yellow guibg=bg
highlight GitGutterChangeDelete ctermfg=yellow guibg=bg
let g:gitgutter_realtime = 0
"}
"}

" Text objects {

Plugin 'vim-scripts/camelcasemotion' "{
" Camelcasemotion
map w <Plug>CamelCaseMotion_w
map b <Plug>CamelCaseMotion_b
map e <Plug>CamelCaseMotion_e
sunmap w
sunmap b
sunmap e
omap iw <Plug>CamelCaseMotion_iw
xmap iw <Plug>CamelCaseMotion_iw
omap ib <Plug>CamelCaseMotion_ib
xmap ib <Plug>CamelCaseMotion_ib
omap ie <Plug>CamelCaseMotion_ie
xmap ie <Plug>CamelCaseMotion_ie
"}

Plugin 'beloglazov/vim-textobj-quotes'  " Closest quotes              aq / iq {
" beloglazov/vim-textobj-quotes
xmap q iq
omap q iq
" Now, you just need to press cq, dq, yq, or vq to operate on the text in single
" ('), double ("), or back (`) quotes nearby without manually moving into them.
" }

Plugin 'kana/vim-textobj-user'
Plugin 'kana/vim-textobj-entire'        " Entire dociment             ae / ie
Plugin 'kana/vim-textobj-indent'        " Indent block                ai / ii / aI / iI
Plugin 'glts/vim-textobj-indblock.git'  " Whitespace in indent block  ao / io
Plugin 'Julian/vim-textobj-brace'       " Any parens                  aj / ij
Plugin 'glts/vim-textobj-comment'       " Comment                     ac / ic
Plugin 'tek/vim-textobj-ruby'           " .rb Block, Class, Fun, Name ab / ac / af / an
Plugin 'vim-scripts/argtextobj.vim'
"}

Plugin 'scrooloose/syntastic' "{
let g:syntastic_ruby_checkers = ['mri', 'rubocop']
let g:syntastic_error_symbol = "✗"
let g:syntastic_style_error_symbol = '✠'
let g:syntastic_warning_symbol = "⚠"
let g:syntastic_style_warning_symbol = "≈"
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_aggregate_errors = 1
" When set to 2 the cursor will jump to the first issue detected, but only if
" this issue is an error. >
let g:syntastic_auto_jump = 2
" When set to 1 the error window will be automatically opened when errors are
" detected, and closed when none are detected. >
let g:syntastic_auto_loc_list = 1
let g:syntastic_loc_list_height = 3
" }

" Lanugage Syntax {
Plugin 'kchmck/vim-coffee-script'
Plugin 'gorodinskiy/vim-coloresque'
Plugin 'slim-template/vim-slim'
Plugin 'vim-ruby/vim-ruby'
" }

" Editing {
Plugin 'AndrewRadev/splitjoin.vim'
Plugin 'AndrewRadev/switch.vim' "{
" Switch
nnoremap - :Switch<cr>
"}
Plugin 'jiangmiao/auto-pairs'
" Plugin 'tomtom/tcomment_vim'
Plugin 'terryma/vim-expand-region'
" }

" Tmux {
Plugin 'sjl/vitality.vim'
Plugin 'benmills/vimux' "{
" Vimux
" Prompt for a command to run
map <leader>vr :VimuxPromptCommand<cr>
map <leader>vx :VimuxCloseRunner<cr>
"}
Plugin 'christoomey/vim-tmux-navigator'
" }

" Navigation and autocompletion {

Plugin 'scrooloose/nerdtree' "{
" scrooloose/nerdtree
" let NERDTreeQuitOnOpen=1
nnoremap <leader>nt :NERDTreeToggle<cr>
nnoremap <leader>nf :NERDTreeFind<cr>
nnoremap <leader>nc :NERDTreeCWD<cr>
" }

Plugin 'kien/ctrlp.vim' "{
" kien/ctrlp.vim
" let g:ctrlp_user_command='git --git-dir=%s/.git ls-files -oc --exclude-standard'
" let g:ctrlp_working_path_mode=0
" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
let g:ctrlp_map = '<c-p><c-p>'
let g:ctrlp_cmd = 'CtrlP'

nnoremap <c-p>t :CtrlPTag<cr>
nnoremap <c-p>r :CtrlPMRUFiles<cr>
nnoremap <c-p>b :CtrlPBuffer<cr>
nnoremap <c-p><c-t> :CtrlPTag<cr>
nnoremap <c-p><c-r> :CtrlPMRUFiles<cr>
nnoremap <c-p><c-b> :CtrlPBuffer<cr>
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif
"}

Plugin 'xolox/vim-easytags' "{
" Easytags
let g:easytags_async = 1
"}

Plugin 'majutsushi/tagbar' " {
let g:tagbar_type_ruby = {
      \ 'kinds' : [
      \ 'm:modules',
      \ 'c:classes',
      \ 'd:describes',
      \ 'C:contexts',
      \ 'f:methods',
      \ 'F:singleton methods'
      \ ]
      \ }
nmap <leader>] :TagbarToggle<CR>
" }

Plugin 'rizzatti/dash.vim'
Plugin 'rking/ag.vim'
Plugin 'xolox/vim-misc'
Plugin 'gregsexton/gitv'
Plugin 'rgarver/Kwbd.vim'

"}

" Tpope {
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-bundler'
Plugin 'tpope/vim-dispatch'
Plugin 'tpope/vim-fugitive' "{
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gc :Gcommit<cr>
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>gr :Gread<cr>

"}

Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-haml'
Plugin 'tpope/vim-rsi'
Plugin 'tpope/vim-endwise'
" }

" vindle#end {
call vundle#end()            " required
filetype plugin indent on    " required
"}

"}
